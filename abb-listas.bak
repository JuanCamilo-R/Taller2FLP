#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 124 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 73 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 72 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1           0 1898 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";Bintree con listas:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53
#";;TALLER 2 -Fundamentos de lenguajes de programaci\303\263n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;Diego Fabi\303\241n Ledesma Motta   1928161-3743"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;Jos\303\251 David Barona            1727590-3743"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;Juan Camilo Randazzo         1923948-3743"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";empty-bintree"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";Contrato: () -> '()"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 24 #"Prop\303\263sito: Proporcionar"
0 0 17 3 54
#" al usuario un \303\241rbol binario vac\303\255o, el cual consiste"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";en una lista vac\303\255a."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 14 #";empty-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"empty-bintree"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";Prueba"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 2 #") "
0 0 17 3 23 #";Resultado esperado: ()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         109 21           0 0           0 17 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";empty-bintree?"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Contrato: bintree -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 80
(4
 #";Prop\xC3\xB3sito: Recibe un bintree y retorna #t en caso de que sea "
 #"un empty-bintree,"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 2 #"#f"
0 0 17 3 1 #" "
0 0 17 3 2 #"en"
0 0 17 3 1 #" "
0 0 17 3 4 #"caso"
0 0 17 3 11 #" contrario."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 15 #";empty-bintree?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 10 #" () ()))  "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          55 21           0 0           0 8 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";current-element"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";Contrato: bintree -> int"
0 0 24 29 1 #"\n"
0 0 17 3 49
#";Prop\303\263sito: Recibe un bintree y retorna la ra\303\255z"
0 0 17 3 12 #" del mismo. "
0           0 0 0 17 3 31 #";PROBLEMA CON LA PRUEBA DEL PDF"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";current-element"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-element"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())  "
0 0 17 3 23 #";Respuesta esperada: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 10 #" () ()))  "
0 0 17 3 22 #";Respuesta esperada: 3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 18 #" () ()) ()) ()))  "
0 0 17 3 22 #";Respuesta esperada: 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          55 21           0 0           0 8 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";move-to-left-son"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Contrato: bintree -> bintree"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Prop\303\263sito: Recibe un bintree"
0 0 17 3 29 #" y retorna el hijo izquierdo."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 17 #";move-to-left-son"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 10 #" () ()))  "
0 0 17 3 23 #";Respuesta esperada: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 18 #" () ()) ()) ()))  "
0 0 17 3 37 #";Respuesta esperada: (2 (1 () ()) ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 2 #"19"
0 0 24 3 2 #" ("
0 0 21 3 2 #"12"
0 0 24 3 2 #" ("
0 0 21 3 2 #"10"
0 0 24 3 19 #" () ()) ()) ())))  "
0 0 17 3 30 #";Respuesta esperada: (1 () ())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          55 21           0 0           0 8 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";move-to-right-son"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Contrato: bintree -> bintree"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";Prop\303\263sito: Recibe un bintree  y retorna el hijo derecho"
0 0 17 3 1 #"."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 18 #";move-to-right-son"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 10 #" () ()))  "
0 0 17 3 23 #";Respuesta esperada: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 18 #" () ()) ()) ()))  "
0 0 17 3 23 #";Respuesta esperada: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 2 #"19"
0 0 24 3 2 #" ("
0 0 21 3 2 #"12"
0 0 24 3 2 #" ("
0 0 21 3 2 #"10"
0 0 24 3 19 #" () ()) ()) ())))  "
0 0 17 3 47 #";Respuesta esperada: (19 (12 (10 () ()) ()) ())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";number->bintree"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";Contrato: int -> bintree"
0 0 24 29 1 #"\n"
0 0 17 3 79
(5
 #";Prop\xC3\xB3sito: Recibe un entero y retorna un bintree con el n\xC3"
 #"\xBAmero recibido como"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";nodo y "
0 0 17 3 3 #"sin"
0 0 17 3 7 #" hijos."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 16 #";number->bintree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"number->bintree"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 13 #"(() ()))  ) )"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")  "
0 0 17 3 30 #";Respuesta esperada: (8 () ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 21 3 2 #"93"
0 0 24 3 3 #")  "
0 0 17 3 31 #";Respuesta esperada: (93 () ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")  "
0 0 17 3 30 #";Respuesta esperada: (0 () ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #")  "
0 0 17 3 31 #";Respuesta esperada: (-1 () ())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          61 21           0 0           0 9 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";at-leaf?"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Contrato: bintree -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 72
(6
 #";Prop\xC3\xB3sito: Recibe un bintree y retorna #t en caso de que sea "
 #"un \xC3\xA1rbol"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";con ra\303\255z y sin hijos, y #f en caso contrario."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 9 #";at-leaf?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"at-leaf?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())  "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 10 #" () ()))  "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"50"
0 0 24 3 10 #" () ()))  "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 21 3 1 #"6"
0 0 24 3 19 #" () ()) ()) ())))  "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          67 21           0 0           0 10 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";bintree-with-at-least-one-child?"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Contrato: bintree -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 72 6 0 0 24 29 1 #"\n"
0 0 17 3 47 #";con al menos un hijo distinto de empty-bintree"
0 0 17 3 25 #", y #f en caso contrario."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 33 #";bintree-with-at-least-one-child?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())  "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 10 #" () ()))  "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 1 #"0"
0 0 24 3 14 #" () ()) ()))  "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"9"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"50"
0 0 24 3 12 #" () ()))))  "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          67 21           0 0           0 10 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";insert-to-left"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";Contrato: int bintree -> bintree"
0 0 24 29 1 #"\n"
0 0 17 3 118
(7
 #";Prop\xC3\xB3sito: En caso de que el \xC3\xA1rbol recibido no tenga h"
 #"ijo izquierdo, retorna un \xC3\xA1rbol similar al recibido pero con"
) 0 0 24 29 1 #"\n"
0 0 17 3 55
#";un hijo izquierdo con el n\303\272mero recibido como bintree"
0 0 17 3 1 #"."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 15 #";insert-to-left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"insert-to-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"insert-to-left"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())  "
0 0 17 3 23 #";Respuesta esperada: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"insert-to-left"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 10 #" () ()))  "
0 0 17 3 37 #";Respuesta esperada: (0 (3 () ()) ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"insert-to-left"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"5"
0 0 24 3 11 #" () ())))  "
0 0 17 3 44 #";Respuesta esperada: (0 (3 () ()) (5 () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"insert-to-left"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"5"
0 0 24 3 18 #" () ()) ()) ()))  "
0 0 17 3 44 #";Respuesta esperada: (0 (4 (5 () ()) ()) ())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          67 21           0 0           0 10 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";insert-to-right"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";Contrato: int bintree -> bintree"
0 0 24 29 1 #"\n"
0 0 17 3 116
(8
 #";Prop\xC3\xB3sito: En caso de que el \xC3\xA1rbol recibido no tenga h"
 #"ijo derecho, retorna un \xC3\xA1rbol similar al recibido pero con"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";un hijo derecho"
0 0 17 3 38 #" con el n\303\272mero recibido como bintree."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 16 #";insert-to-right"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"insert-to-right"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())) )"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"insert-to-right"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())  "
0 0 17 3 30 #";Respuesta esperada: (3 () ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"insert-to-right"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 10 #" () ()))  "
0 0 17 3 36 #";Respuesta esperada:(0 () (3 () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"insert-to-right"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"8"
0 0 24 3 11 #" () ())))  "
0 0 17 3 43 #";Respuesta esperada:(0 () (3 () (8 () ())))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"insert-to-right"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 1 #"5"
0 0 24 3 14 #" () ()) ()))  "
0 0 17 3 44 #";Respuesta esperada: (0 (5 () ()) (3 () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"insert-to-right"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"5"
0 0 24 3 18 #" () ()) ()) ()))  "
0 0 17 3 51 #";Respuesta esperada: (0 (4 (5 () ()) ()) (3 () ()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(9
 #";Funciones auxiliares de bintree-order-validation: numbers-in-bintree"
 #" greatest-in-list lowest-in-list"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          49 21           0 0           0 7 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";numbers-in-bintree"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Contrato: bintree -> list"
0 0 24 29 1 #"\n"
0 0 17 3 95
(10
 #";Prop\xC3\xB3sito: Recibe un bintree y retorna una lista de todos los"
 #" n\xC3\xBAmeros presentes en el mismo."
) 0           0 0 0 24 29 1 #"\n"
0 0 17 3 19 #";numbers-in-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")  ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")  ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 6 #")) ))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 17 3 23 #";Resultado esperado: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 9 #" () ())) "
0 0 17 3 24 #";Resultado esperado: (8)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"5"
0 0 24 3 17 #" () ()) ()) ())) "
0 0 17 3 28 #";Resultado esperado: (0 4 5)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"9"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"50"
0 0 24 3 11 #" () ())))) "
0 0 17 3 29 #";Resultado esperado: (0 9 50)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 21 3 1 #"6"
0 0 24 3 18 #" () ()) ()) ()))) "
0 0 17 3 32 #";Resultado esperado: (5 1 9 7 6)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"7"
0 0 24 3 11 #" () ()))) ("
0 0 21 3 2 #"10"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 2 #"13"
0 0 24 3 15 #" () ()) ())))) "
0 0 17 3 43 #";Resultado esperado: (8 3 1 6 4 7 10 14 13)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          49 21           0 0           0 7 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";greatest-list"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";Contrato: list -> int"
0 0 24 29 1 #"\n"
0 0 17 3 80
(11
 #";Prop\xC3\xB3sito: Recibe una lista de enteros y retorna el mayor n"
 #"\xC3\xBAmero de la misma."
) 0           0 0 0 24 29 1 #"\n"
0 0 17 3 14 #";greatest-list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"greatest-in-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 19 #";[(null? list) '()]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 9 #"())))])))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Respuesta esperada: 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Respuesta esperada: 7"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 3 #")) "
0 0 17 3 23 #"; Respuesta esperada: 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          49 21           0 0           0 7 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";lowest-in-list"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";Contrato: list -> int"
0 0 24 29 1 #"\n"
0 0 17 3 80
(12
 #";Prop\xC3\xB3sito: Recibe una lista de enteros y retorna el menor n"
 #"\xC3\xBAmero de la misma."
) 0           0 0 0 24 29 1 #"\n"
0 0 17 3 15 #";lowest-in-list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"lowest-in-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"             )))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Respuesta esperada: 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Respuesta esperada: 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Respuesta esperada: 2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Respuesta esperada: -5"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";bintree-order-validation"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Contrato: bintree -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 74
(13
 #";Prop\xC3\xB3sito: Recibe un bintree y verifica la propiedad de orden"
 #" del mismo;"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(14
 #";Si el bintree en efecto cumple la propiedad de orden, retorna #t, y "
 #"en caso"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";contrario retorna #f."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 25 #";bintree-order-validation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"bintree-order-validation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #"("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 16 #"greatest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #"("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 14 #"lowest-in-list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"      ) ))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 9 #" () ())) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"7"
0 0 24 3 10 #" () ()))) "
0 0 17 3 23 #";Resultado esperado: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 21 3 1 #"5"
0 0 24 3 17 #" () ()) ()) ())) "
0 0 17 3 23 #";Resultado esperado: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"9"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"50"
0 0 24 3 11 #" () ())))) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"9"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"50"
0 0 24 3 2 #" ("
0 0 21 3 1 #"9"
0 0 24 3 16 #" () ()) ()))))  "
0 0 17 3 23 #";Resultado esperado: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 21 3 1 #"6"
0 0 24 3 18 #" () ()) ()) ()))) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"7"
0 0 24 3 11 #" () ()))) ("
0 0 21 3 2 #"10"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 2 #"13"
0 0 24 3 15 #" () ()) ())))) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"7"
0 0 24 3 11 #" () ()))) ("
0 0 21 3 2 #"10"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 1 #"6"
0 0 24 3 15 #" () ()) ())))) "
0 0 17 3 23 #";Resultado esperado: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 9 #" () ()) ("
0 0 21 3 1 #"7"
0 0 24 3 11 #" () ()))) ("
0 0 21 3 2 #"10"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 2 #"10"
0 0 24 3 15 #" () ()) ())))) "
0 0 17 3 23 #";Resultado esperado: #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";Funci\303\263n auxiliare insert-element-into-bintree?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          55 21           0 0           0 8 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";is-elem?"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Contrato: int list -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 55
#";Prop\303\263sito: Recibe un n\303\272mero y una lista de enteros, "
0 0 17 3 64
#"y verifica si este se encuentra en la listra proporcionada o no."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 9 #";is-elem?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"is-elem?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 7 #"))]) ))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Respuesta esperada: #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Respuesta esperada: #t"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(15
 #";REVISAR ORDEN ARGUMENTOS TODAS LAS FUNCIONES Y REPETIR TODAS LAS PRU"
 #"EBAS "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";5"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";insert-element-into-bintree"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";Contrato: bintree int -> bintree"
0 0 24 29 1 #"\n"
0 0 17 3 97
(16
 #";Prop\xC3\xB3sito: Recibe un n\xC3\xBAmero y un bintree, e inserta el"
 #" n\xC3\xBAmero en el bintree seg\xC3\xBAn las reglas"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(17
 #";de la propiedad de orden. Si el n\xC3\xBAmero ya se encontraba en el"
 #" bintree, se retorna el mismo sin"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";modificaci\303\263n."
0           0 0 0 24 29 1 #"\n"
0 0 17 3 28 #";insert-element-into-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"is-elem?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 18 #"numbers-in-bintree"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #")) "
0 0 14 3 1 #"B"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #")("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #")("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 17 3 30 #";Respuesta esperada: (5 () ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 8 #" () ()) "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 17 3 30 #";Respuesta esperada: (5 () ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"3"
0 0 24 3 8 #" () ()) "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 17 3 37 #";Respuesta esperada: (3 () (5 () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 8 #" () ()) "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 17 3 37 #";Respuesta esperada: (6 (5 () ()) ())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"5"
0 0 24 3 9 #" () ())) "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 17 3 37 #";Respuesta esperada: (6 () (5 () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 5 #" () ("
0 0 21 3 1 #"7"
0 0 24 3 9 #" () ())) "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 17 3 37 #";Respuesta esperada: (6 () (7 () ()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
